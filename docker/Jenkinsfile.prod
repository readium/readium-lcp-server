pipeline {
  agent any

  stages {

    stage("Clone repository") {
      // Missing Credentials can be added via UI
      // Look at the bottom of the box for a link called "Pipeline-Syntax"
      // If you don't have much Jenkins experience,
      // there you can generate pipelines with a few Dropdowns and Textboxes
      steps {
        git branch: 'cd_dev', poll: false, url: 'https://github.com/readium/readium-lcp-server'
      }
    }

    stage("Build") {
      steps {
        script {
          withCredentials([file(credentialsId: 'cert-edrlab-pem', variable: 'CERTIFICATE_PATH', domain: 'lcp'),
              file(credentialsId: 'userkey-h', variable: 'USERKEYH_PATH', domain: 'lcp'),
              file(credentialsId: 'libuserkey-a', variable: 'LIBUSERKEY_PATH', domain: 'lcp'),
              file(credentialsId: 'privkey-edrlab-pem', variable: 'PRIVATE_KEY_PATH', domain: 'lcp'),
              file(credentialsId: 'user-key-go', variable: 'USERKEYGO_PATH', domain: 'lcp'),
              string(credentialsId: 'SLACK_TOKEN', variable: 'SLACK_TOKEN', domain: 'lcp')]) {

              sh "rm -rf ./secrets && mkdir ./secrets && cp $CERTIFICATE_PATH ./secrets/cert.pem && cp $USERKEYH_PATH ./secrets/userkey.h && cp $LIBUSERKEY_PATH ./secrets/libuserkey.a && cp $PRIVATE_KEY_PATH ./secrets/privkey.pem && cp $USERKEYGO_PATH ./secrets/user_key.go"

              app = docker.build("readium-lcp-server-build-prod", """ \
                  -f docker/Dockerfile \
                  --progress=plain \
                  --build-arg LIBUSERKEY_PATH=./secrets/libuserkey.a \
                  --build-arg USERKEYH_PATH=./secrets/userkey.h \
                  --build-arg USERKEYGO_PATH=./secrets/user_key.go \
                  --build-arg BUILD_PROD=true \
                  --build-arg PRIVATE_KEY_PATH=./secrets/privkey.pem \
                  --build-arg CERTIFICATE_PATH=./secrets/cert.pem \
                  --build-arg LOGGING_SLACK_TOKEN="$SLACK_TOKEN" \
                  --build-arg LOGGING_SLACK_CHANNEL="C07L7FUL93J" \
                  --build-arg PROFILE=2.1 \
                  .
                  """)

               sh "rm -rf ./secrets"
          }
        }
      }
    }

    stage("Test image") {
      steps {
        script {
          app.inside {
            sh 'echo "Tests passed"'
          }
        }
      }
    }

    stage("Push image") {
      steps {
        script {
          docker.withRegistry('http://registry-lcp.local:5000') {
            app.push("latest")
          }
        }
      }
    }

    stage('Remove image') {
      steps {
        script {
          sh "docker image rm -f ${app.imageName()}"
        }
      }
    }
  }
}
