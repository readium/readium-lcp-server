import { Component, OnInit }        from '@angular/core';
import { Observable, Subscription } from 'rxjs/Rx';

import { Slug }     from 'ng2-slugify';
import * as moment  from 'moment';
import * as saveAs  from 'file-saver';

import { Purchase }          from './purchase';
import { PurchaseService }   from './purchase.service';
import { Publication }  from '../publication/publication';
import { User }  from '../user/user';

declare var Config: any; //  this comes from the autogenerated config.js file

@Component({
    moduleId: module.id,
    selector: 'lcp-purchase-list',
    templateUrl: 'purchase-list.component.html'
})

export class PurchaseListComponent implements OnInit {
    purchases: Purchase[];
    search: string = "";
    order: string;
    reverse: boolean = false;
    private slug = new Slug('default');

    constructor(private purchaseService: PurchaseService) {
        this.purchases = [];
        this.order = "id";
        this.reverse = true;
    }

    refreshPurchases(): void {
        this.purchaseService.list().then(
            purchases => {
                this.purchases = purchases;
            }
        );
    }

    orderBy(newOrder: string)
    {
      if (newOrder == this.order)
      {
        this.reverse = !this.reverse;
      }
      else
      {
        this.reverse = false;
        this.order = newOrder;
      }
    }

    keptWithFilter (pur: {publication: Publication, user: User}): boolean
    {
        if (pur.publication.title.toUpperCase().includes(this.search.toUpperCase()) || pur.user.name.toUpperCase().includes(this.search.toUpperCase()))
        {
            return true;
        }

        return false;
    }

    buildLicenseDeliveredClass(licenseUuid: string) {
         if (licenseUuid == null) {
            return "danger";
        }

        return "success";
    }

    buildStatusClass(status: string) {
        if (status == "error") {
            return "danger";
        } else if (status == "returned") {
            return "warning"
        }
        return "success";
    }

    formatDate(date: string): string {
        return moment(date).format('YYYY-MM-DD HH:mm');
    }

    ngOnInit(): void {
        this.refreshPurchases();
    }

    onRemove(objId: any): void {
        this.purchaseService.delete(objId).then(
            purchase => {
                this.refreshPurchases();
            }
        );
    }
 }
